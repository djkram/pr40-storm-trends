package com.javiermoreno.trends.domain;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class TweetDTOThrift implements
		org.apache.thrift.TBase<TweetDTOThrift, TweetDTOThrift._Fields>,
		java.io.Serializable, Cloneable {
	private static final long serialVersionUID = 1L;

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TweetDTOThrift");

	private static final org.apache.thrift.protocol.TField SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"screenName", org.apache.thrift.protocol.TType.STRING, (short) 10);
	private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"message", org.apache.thrift.protocol.TType.STRING, (short) 20);
	private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"timestamp", org.apache.thrift.protocol.TType.I64, (short) 30);
	private static final org.apache.thrift.protocol.TField LON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"lon", org.apache.thrift.protocol.TType.DOUBLE, (short) 40);
	private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"lat", org.apache.thrift.protocol.TType.DOUBLE, (short) 50);
	private static final org.apache.thrift.protocol.TField PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"place", org.apache.thrift.protocol.TType.STRING, (short) 60);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class,
				new TweetDTOThriftStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TweetDTOThriftTupleSchemeFactory());
	}

	public String screenName; // required
	public String message; // required
	public long timestamp; // optional
	public double lon; // optional
	public double lat; // optional
	public String place; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		SCREEN_NAME((short) 10, "screenName"), MESSAGE((short) 20, "message"), TIMESTAMP(
				(short) 30, "timestamp"), LON((short) 40, "lon"), LAT(
				(short) 50, "lat"), PLACE((short) 60, "place");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 10: // SCREEN_NAME
				return SCREEN_NAME;
			case 20: // MESSAGE
				return MESSAGE;
			case 30: // TIMESTAMP
				return TIMESTAMP;
			case 40: // LON
				return LON;
			case 50: // LAT
				return LAT;
			case 60: // PLACE
				return PLACE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __TIMESTAMP_ISSET_ID = 0;
	private static final int __LON_ISSET_ID = 1;
	private static final int __LAT_ISSET_ID = 2;
	private byte __isset_bitfield = 0;
	private _Fields optionals[] = { _Fields.TIMESTAMP, _Fields.LON,
			_Fields.LAT, _Fields.PLACE };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.SCREEN_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("screenName",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MESSAGE,
				new org.apache.thrift.meta_data.FieldMetaData("message",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TIMESTAMP,
				new org.apache.thrift.meta_data.FieldMetaData("timestamp",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.LON, new org.apache.thrift.meta_data.FieldMetaData(
				"lon", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData(
				"lat", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PLACE,
				new org.apache.thrift.meta_data.FieldMetaData("place",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				TweetDTOThrift.class, metaDataMap);
	}

	public TweetDTOThrift() {
	}

	public TweetDTOThrift(String screenName, String message) {
		this();
		this.screenName = screenName;
		this.message = message;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TweetDTOThrift(TweetDTOThrift other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetScreenName()) {
			this.screenName = other.screenName;
		}
		if (other.isSetMessage()) {
			this.message = other.message;
		}
		this.timestamp = other.timestamp;
		this.lon = other.lon;
		this.lat = other.lat;
		if (other.isSetPlace()) {
			this.place = other.place;
		}
	}

	public TweetDTOThrift deepCopy() {
		return new TweetDTOThrift(this);
	}

	@Override
	public void clear() {
		this.screenName = null;
		this.message = null;
		setTimestampIsSet(false);
		this.timestamp = 0;
		setLonIsSet(false);
		this.lon = 0.0;
		setLatIsSet(false);
		this.lat = 0.0;
		this.place = null;
	}

	public String getScreenName() {
		return this.screenName;
	}

	public TweetDTOThrift setScreenName(String screenName) {
		this.screenName = screenName;
		return this;
	}

	public void unsetScreenName() {
		this.screenName = null;
	}

	/**
	 * Returns true if field screenName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetScreenName() {
		return this.screenName != null;
	}

	public void setScreenNameIsSet(boolean value) {
		if (!value) {
			this.screenName = null;
		}
	}

	public String getMessage() {
		return this.message;
	}

	public TweetDTOThrift setMessage(String message) {
		this.message = message;
		return this;
	}

	public void unsetMessage() {
		this.message = null;
	}

	/**
	 * Returns true if field message is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetMessage() {
		return this.message != null;
	}

	public void setMessageIsSet(boolean value) {
		if (!value) {
			this.message = null;
		}
	}

	public long getTimestamp() {
		return this.timestamp;
	}

	public TweetDTOThrift setTimestamp(long timestamp) {
		this.timestamp = timestamp;
		setTimestampIsSet(true);
		return this;
	}

	public void unsetTimestamp() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__TIMESTAMP_ISSET_ID);
	}

	/**
	 * Returns true if field timestamp is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetTimestamp() {
		return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
	}

	public void setTimestampIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__TIMESTAMP_ISSET_ID, value);
	}

	public double getLon() {
		return this.lon;
	}

	public TweetDTOThrift setLon(double lon) {
		this.lon = lon;
		setLonIsSet(true);
		return this;
	}

	public void unsetLon() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__LON_ISSET_ID);
	}

	/**
	 * Returns true if field lon is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLon() {
		return EncodingUtils.testBit(__isset_bitfield, __LON_ISSET_ID);
	}

	public void setLonIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__LON_ISSET_ID, value);
	}

	public double getLat() {
		return this.lat;
	}

	public TweetDTOThrift setLat(double lat) {
		this.lat = lat;
		setLatIsSet(true);
		return this;
	}

	public void unsetLat() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__LAT_ISSET_ID);
	}

	/**
	 * Returns true if field lat is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLat() {
		return EncodingUtils.testBit(__isset_bitfield, __LAT_ISSET_ID);
	}

	public void setLatIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__LAT_ISSET_ID, value);
	}

	public String getPlace() {
		return this.place;
	}

	public TweetDTOThrift setPlace(String place) {
		this.place = place;
		return this;
	}

	public void unsetPlace() {
		this.place = null;
	}

	/**
	 * Returns true if field place is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPlace() {
		return this.place != null;
	}

	public void setPlaceIsSet(boolean value) {
		if (!value) {
			this.place = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case SCREEN_NAME:
			if (value == null) {
				unsetScreenName();
			} else {
				setScreenName((String) value);
			}
			break;

		case MESSAGE:
			if (value == null) {
				unsetMessage();
			} else {
				setMessage((String) value);
			}
			break;

		case TIMESTAMP:
			if (value == null) {
				unsetTimestamp();
			} else {
				setTimestamp((Long) value);
			}
			break;

		case LON:
			if (value == null) {
				unsetLon();
			} else {
				setLon((Double) value);
			}
			break;

		case LAT:
			if (value == null) {
				unsetLat();
			} else {
				setLat((Double) value);
			}
			break;

		case PLACE:
			if (value == null) {
				unsetPlace();
			} else {
				setPlace((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case SCREEN_NAME:
			return getScreenName();

		case MESSAGE:
			return getMessage();

		case TIMESTAMP:
			return Long.valueOf(getTimestamp());

		case LON:
			return Double.valueOf(getLon());

		case LAT:
			return Double.valueOf(getLat());

		case PLACE:
			return getPlace();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case SCREEN_NAME:
			return isSetScreenName();
		case MESSAGE:
			return isSetMessage();
		case TIMESTAMP:
			return isSetTimestamp();
		case LON:
			return isSetLon();
		case LAT:
			return isSetLat();
		case PLACE:
			return isSetPlace();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TweetDTOThrift)
			return this.equals((TweetDTOThrift) that);
		return false;
	}

	public boolean equals(TweetDTOThrift that) {
		if (that == null)
			return false;

		boolean this_present_screenName = true && this.isSetScreenName();
		boolean that_present_screenName = true && that.isSetScreenName();
		if (this_present_screenName || that_present_screenName) {
			if (!(this_present_screenName && that_present_screenName))
				return false;
			if (!this.screenName.equals(that.screenName))
				return false;
		}

		boolean this_present_message = true && this.isSetMessage();
		boolean that_present_message = true && that.isSetMessage();
		if (this_present_message || that_present_message) {
			if (!(this_present_message && that_present_message))
				return false;
			if (!this.message.equals(that.message))
				return false;
		}

		boolean this_present_timestamp = true && this.isSetTimestamp();
		boolean that_present_timestamp = true && that.isSetTimestamp();
		if (this_present_timestamp || that_present_timestamp) {
			if (!(this_present_timestamp && that_present_timestamp))
				return false;
			if (this.timestamp != that.timestamp)
				return false;
		}

		boolean this_present_lon = true && this.isSetLon();
		boolean that_present_lon = true && that.isSetLon();
		if (this_present_lon || that_present_lon) {
			if (!(this_present_lon && that_present_lon))
				return false;
			if (this.lon != that.lon)
				return false;
		}

		boolean this_present_lat = true && this.isSetLat();
		boolean that_present_lat = true && that.isSetLat();
		if (this_present_lat || that_present_lat) {
			if (!(this_present_lat && that_present_lat))
				return false;
			if (this.lat != that.lat)
				return false;
		}

		boolean this_present_place = true && this.isSetPlace();
		boolean that_present_place = true && that.isSetPlace();
		if (this_present_place || that_present_place) {
			if (!(this_present_place && that_present_place))
				return false;
			if (!this.place.equals(that.place))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(TweetDTOThrift other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		TweetDTOThrift typedOther = (TweetDTOThrift) other;

		lastComparison = Boolean.valueOf(isSetScreenName()).compareTo(
				typedOther.isSetScreenName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetScreenName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.screenName, typedOther.screenName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMessage()).compareTo(
				typedOther.isSetMessage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMessage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.message, typedOther.message);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(
				typedOther.isSetTimestamp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTimestamp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.timestamp, typedOther.timestamp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLon()).compareTo(
				typedOther.isSetLon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lon,
					typedOther.lon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLat()).compareTo(
				typedOther.isSetLat());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLat()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat,
					typedOther.lat);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPlace()).compareTo(
				typedOther.isSetPlace());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPlace()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.place, typedOther.place);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TweetDTOThrift(");
		boolean first = true;

		sb.append("screenName:");
		if (this.screenName == null) {
			sb.append("null");
		} else {
			sb.append(this.screenName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("message:");
		if (this.message == null) {
			sb.append("null");
		} else {
			sb.append(this.message);
		}
		first = false;
		if (isSetTimestamp()) {
			if (!first)
				sb.append(", ");
			sb.append("timestamp:");
			sb.append(this.timestamp);
			first = false;
		}
		if (isSetLon()) {
			if (!first)
				sb.append(", ");
			sb.append("lon:");
			sb.append(this.lon);
			first = false;
		}
		if (isSetLat()) {
			if (!first)
				sb.append(", ");
			sb.append("lat:");
			sb.append(this.lat);
			first = false;
		}
		if (isSetPlace()) {
			if (!first)
				sb.append(", ");
			sb.append("place:");
			if (this.place == null) {
				sb.append("null");
			} else {
				sb.append(this.place);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (screenName == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'screenName' was not present! Struct: "
							+ toString());
		}
		if (message == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'message' was not present! Struct: "
							+ toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TweetDTOThriftStandardSchemeFactory implements
			SchemeFactory {
		public TweetDTOThriftStandardScheme getScheme() {
			return new TweetDTOThriftStandardScheme();
		}
	}

	private static class TweetDTOThriftStandardScheme extends
			StandardScheme<TweetDTOThrift> {

		public void read(org.apache.thrift.protocol.TProtocol iprot,
				TweetDTOThrift struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 10: // SCREEN_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.screenName = iprot.readString();
						struct.setScreenNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 20: // MESSAGE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.message = iprot.readString();
						struct.setMessageIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 30: // TIMESTAMP
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.timestamp = iprot.readI64();
						struct.setTimestampIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 40: // LON
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.lon = iprot.readDouble();
						struct.setLonIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 50: // LAT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.lat = iprot.readDouble();
						struct.setLatIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 60: // PLACE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.place = iprot.readString();
						struct.setPlaceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				TweetDTOThrift struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.screenName != null) {
				oprot.writeFieldBegin(SCREEN_NAME_FIELD_DESC);
				oprot.writeString(struct.screenName);
				oprot.writeFieldEnd();
			}
			if (struct.message != null) {
				oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
				oprot.writeString(struct.message);
				oprot.writeFieldEnd();
			}
			if (struct.isSetTimestamp()) {
				oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
				oprot.writeI64(struct.timestamp);
				oprot.writeFieldEnd();
			}
			if (struct.isSetLon()) {
				oprot.writeFieldBegin(LON_FIELD_DESC);
				oprot.writeDouble(struct.lon);
				oprot.writeFieldEnd();
			}
			if (struct.isSetLat()) {
				oprot.writeFieldBegin(LAT_FIELD_DESC);
				oprot.writeDouble(struct.lat);
				oprot.writeFieldEnd();
			}
			if (struct.place != null) {
				if (struct.isSetPlace()) {
					oprot.writeFieldBegin(PLACE_FIELD_DESC);
					oprot.writeString(struct.place);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TweetDTOThriftTupleSchemeFactory implements
			SchemeFactory {
		public TweetDTOThriftTupleScheme getScheme() {
			return new TweetDTOThriftTupleScheme();
		}
	}

	private static class TweetDTOThriftTupleScheme extends
			TupleScheme<TweetDTOThrift> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot,
				TweetDTOThrift struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.screenName);
			oprot.writeString(struct.message);
			BitSet optionals = new BitSet();
			if (struct.isSetTimestamp()) {
				optionals.set(0);
			}
			if (struct.isSetLon()) {
				optionals.set(1);
			}
			if (struct.isSetLat()) {
				optionals.set(2);
			}
			if (struct.isSetPlace()) {
				optionals.set(3);
			}
			oprot.writeBitSet(optionals, 4);
			if (struct.isSetTimestamp()) {
				oprot.writeI64(struct.timestamp);
			}
			if (struct.isSetLon()) {
				oprot.writeDouble(struct.lon);
			}
			if (struct.isSetLat()) {
				oprot.writeDouble(struct.lat);
			}
			if (struct.isSetPlace()) {
				oprot.writeString(struct.place);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot,
				TweetDTOThrift struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.screenName = iprot.readString();
			struct.setScreenNameIsSet(true);
			struct.message = iprot.readString();
			struct.setMessageIsSet(true);
			BitSet incoming = iprot.readBitSet(4);
			if (incoming.get(0)) {
				struct.timestamp = iprot.readI64();
				struct.setTimestampIsSet(true);
			}
			if (incoming.get(1)) {
				struct.lon = iprot.readDouble();
				struct.setLonIsSet(true);
			}
			if (incoming.get(2)) {
				struct.lat = iprot.readDouble();
				struct.setLatIsSet(true);
			}
			if (incoming.get(3)) {
				struct.place = iprot.readString();
				struct.setPlaceIsSet(true);
			}
		}
	}

}
